<div id="details" class="page">
    <button class="back"> Back </button>
    <div class="page__content">
        <img
            src=""
            alt=""
            loading="lazy"
            decoding="async"
            draggable="false"
            class="page__logo"
        />
        <p class="page__description"></p>
        <a href="#" class="page__url" target="_blank"></a>
        <div class="page__icons page__techs"></div>
        <div class="page__icons page__roles"></div>
    </div>
    <div class="splide">
        <div class="splide__track">
            <ul class="splide__list"></ul>
        </div>
    </div>
</div>

<style>
    .back {
        position: absolute;
        left: 0;
        right: auto;
        top: 0;
        z-index: 10;
        background: transparent;
        border: none;
        color: #8ca5ba;
        padding: 1rem 1.5rem;
        cursor: pointer;
        font-family: "Karla";
    }
    .back:active {
        -webkit-transform: scale(0.95);
        -ms-transform: scale(0.95);
        transform: scale(0.95);
    }

    .splide {
        z-index: 10;
    }

    .page {
        background-color: var(--secondary-color);
        width: 100%;
        height: 100%;
        max-width: var(--max-width);
        border-radius: 0.7rem;
        position: relative;
        padding-bottom: 4rem;
        overflow-x: hidden;
        overflow-y: auto;

        position: fixed;
        inset: 0;
        z-index: 9;
        -webkit-transform: translateX(100%);
        -ms-transform: translateX(100%);
        transform: translateX(100%);
        -webkit-transition: -webkit-transform 0.3s ease-out;
        transition: -webkit-transform 0.3s ease-out;
        -o-transition: transform 0.3s ease-out;
        transition: transform 0.3s ease-out;
        transition:
            transform 0.3s ease-out,
            -webkit-transform 0.3s ease-out;
        -webkit-transition-delay: 0.4s;
        -o-transition-delay: 0.4s;
        transition-delay: 0.4s;
    }
    .page:after {
        content: "";
        position: absolute;
        z-index: 0;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: -o-radial-gradient(85% -10%, circle, rgba(0, 0, 0, 0), #000),
            url("../../src/assets/images/noise.svg");
        background: radial-gradient(circle at 85% -10%, rgba(0, 0, 0, 0), #000),
            url("../../src/assets/images/noise.svg");
        -webkit-filter: contrast(200%);
        filter: contrast(250%);
        mix-blend-mode: screen;
        opacity: 0.5;
    }
    .page__content {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -ms-flex-direction: column;
        flex-direction: column;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        text-align: center;
        margin: 6rem auto 3rem auto;
        width: 90%;
        max-width: var(--max-width);
        position: relative;
        z-index: 2;
    }
    .page__logo {
        height: auto;
        width: 6.5rem;
        max-width: unset;
        margin-bottom: 0.5rem;
    }
    .page__description {
        font-size: 0.85rem;
    }
    .page__url {
        display: block;
        margin-top: 0.8rem;
        margin-bottom: 1rem;
        font: var(--description);
        color: #b2c2d6;
        font-size: 0.8rem;
    }
    .page__icons {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-pack: start;
        -ms-flex-pack: start;
        justify-content: start;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        -webkit-column-gap: 1.2rem;
        -moz-column-gap: 1.2rem;
        column-gap: 1.2rem;
        row-gap: 0.8rem;
        margin: 1.5rem 0 0;
    }
    .page__roles {
        margin-top: 3rem;
    }
    .page__roles p {
        text-transform: capitalize;
        margin-top: 0.5rem;
    }

    @media screen and (max-width: 750px) {
        .page__icons {
            -webkit-box-pack: center;
            -ms-flex-pack: center;
            justify-content: center;
        }
    }
</style>

<script
    src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js"
></script>

<script>
    import { projects } from "../data/projects";

    const details = document.getElementById("details");
    if (details) {
        const checkHash = () => {
            const hash =
                details.dataset.hash || details.getAttribute("data-hash");

            let desc = document.querySelector(".page__description"),
                logo = document.querySelector(".page__logo"),
                roles = document.querySelector(".page__roles"),
                techs = document.querySelector(".page__techs"),
                splides = document.querySelector(".splide__list"),
                url = document.querySelector(".page__url");

            const project = projects.find((project) => project.title === hash);

            if (desc && logo && roles && techs && splides && url && project) {
                roles.innerHTML = "";
                techs.innerHTML = "";
                splides.innerHTML = "";

                desc.textContent = project.desc;

                url.setAttribute("href", project.url);
                url.textContent = project.urlText;

                logo.setAttribute(
                    "src",
                    `../../../src/assets/images/${project.path}`,
                );
                (logo as HTMLElement).style.width = `${project.pageWidth}rem`;

                project.roles.map((role) => {
                    const p = document.createElement("p");
                    p.textContent = role;
                    roles.appendChild(p);
                });

                project.technologies.map(async (tech) => {
                    const res = await fetch(`/src/assets/svg/${tech}.svg`);
                    const svgText = await res.text();

                    const span = document.createElement("span");
                    span.classList.add("icon__container");

                    const icon = document.createElement("span");
                    icon.classList.add("icon");
                    icon.innerHTML = svgText;

                    const label = document.createElement("span");
                    label.classList.add("icon__label");
                    label.textContent = tech;

                    span.appendChild(icon);
                    span.appendChild(label);

                    techs.appendChild(span);
                });

                project.screenshots.map((screen) => {
                    const li = document.createElement("li");
                    li.classList.add("splide__slide");
                    li.classList.add(screen.class);

                    const img = document.createElement("img");
                    img.setAttribute(
                        "src",
                        `../../../src/assets/images/${project.title}/${screen.path}.jpg`,
                    );

                    li.appendChild(img);
                    splides.appendChild(li);
                });

                const sliders = document.getElementsByClassName("splide");

                if (sliders) {
                    for (var i = 0; i < sliders.length; i++) {
                        new Splide(sliders[i], {
                            type: "slide",
                            arrows: false,
                            pagination: false,
                            autoWidth: true,
                        }).mount();
                    }
                }
            }
        };

        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (
                    mutation.type === "attributes" &&
                    mutation.attributeName === "data-hash"
                ) {
                    checkHash();
                }
            });
        });

        observer.observe(details, {
            attributes: true,
            attributeFilter: ["data-hash"],
        });

        checkHash();
    }
</script>
